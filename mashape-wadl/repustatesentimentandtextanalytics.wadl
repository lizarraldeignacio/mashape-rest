<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<application xmlns:f1994="urn:function:f1994" xmlns:f1995="urn:function:f1995" xmlns:f1996="urn:function:f1996" xmlns:f1997="urn:function:f1997" xmlns:f1998="urn:function:f1998" xmlns:f1999="urn:function:f1999" xmlns:f2000="urn:function:f2000" xmlns:f2001="urn:function:f2001" xmlns:f2002="urn:function:f2002" xmlns:f2003="urn:function:f2003" xmlns:f2005="urn:function:f2005" xmlns:f2006="urn:function:f2006" xmlns:f2007="urn:function:f2007">
    <grammars>
        <include href="Function2007.xsd"/>
        <include href="Function2006.xsd"/>
        <include href="Function2005.xsd"/>
        <include href="Function2003.xsd"/>
        <include href="Function2002.xsd"/>
        <include href="Function2001.xsd"/>
        <include href="Function2000.xsd"/>
        <include href="Function1999.xsd"/>
        <include href="Function1998.xsd"/>
        <include href="Function1997.xsd"/>
        <include href="Function1996.xsd"/>
        <include href="Function1995.xsd"/>
        <include href="Function1994.xsd"/>
    </grammars>
    <doc>repustate s sentiment analysis and text analytics API allows you to extract key words and phrases and determine social media sentiment in one of many languages These languages include English Arabic German French and Spanish Monitor social media as well using our API and retrieve your data all with simple API calls</doc>
    <resources base="https://repustate.p.mashape.com/">
        <resource uri="v2/">
            <resource uri="{apikey}/">
                <param name="apikey" style="template" type="xsd:string"/>
                <resource uri="verb.json/">
                    <method displayName="Verbs" id="2007" name="POST">
                        <doc>With Repustate's natural language toolkit, you can extract key verbs, or action words, from data all over the world. Find the words that connote an intent to act on a certain product or trend.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f2007:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="bulk-score.json/">
                    <method displayName="Sentiment (bulk)" id="2006" name="POST">
                        <doc>If you plan on analyzing a large number of text documents (i.e you already have the text and you're not relying on Repustate to grab the content via a URL) then we suggest utilizing our bulk API. With this API call, you can POST up to 500 pieces of text a time when using English and 100 pieces of text at a time for other languages and Repustate will return an XML or JSON list with a score for each block of text.  All languages can be analyzed in bulk, EXCEPT for Arabic. Only one piece of Arabic text will be analyzed per request.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f2006:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="score.json/">
                    <method displayName="Sentiment" id="2005" name="POST">
                        <doc>Repustate's sentiment analysis allows you to determine the sentiment (how people "feel" about a particular topic) from any data source you have access to. Like most of Repustate's API calls, you have a choice of how to specify your arguments. You can supply one of a block of text, a single URL, or a list of URLs.  Note that one of text or url must be included, but not both. If both are included, the text value will be used.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string">
                                <doc>https www repustate com docs signup modal</doc>
                            </param>
                        </request>
                        <response>
                            <representation element="f2005:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="powerpoint/">
                    <method displayName="PowerPoint Slides" id="2004" name="POST">
                        <doc>Repustate allows you to programmatically create PowerPoint slides with a simple API call. This API call can be really useful for automating reports that need to be generated regularly. You can supply a title for each slide and an image. The image must be base64 encoded. Currently, all slides can contain only a title and an image, and the slides are all on a simple white background. We intend to add the ability to make the slides more dynamic as well as suppling a custom template to use.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                    </method>
                </resource>
                <resource uri="noun.json/">
                    <method displayName="Nouns" id="2003" name="POST">
                        <doc>With Repustate's natural language toolkit, you can extract nouns, or people, places and things, from data all over the world. Find the topics that are of importance to your customers with this API call.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f2003:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="ngrams.json/">
                    <method displayName="N-grams" id="2002" name="GET">
                        <doc>This API call generates all n-grams within a block of text (or URL) and returns the frequency of their occurrence. For more information about n-grams, check out the Wikipedia entry. You can specify up to what length 'n' you want generated, but anything higher than 5 probably won't return anything useful.  Optional arguments include the ability to filter on a minimum frequency of occurrence as well as a minimum number of n-gram terms (e.g. only show bi-grams or more and skip all unigrams).  Please note that if you are using HTTP GET, any optional arguments need to be URL-encoded. If you are using HTTP POST, any optional arguments should be part of your POST'ed data.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                            <param name="freq" required="true" style="query" type="xsd:string">
                                <doc>the minimum frequency of occurrence that should be returned If for example you put freq then no n gram that occurs fewer than two times will appear in your result set This is useful because most n grams appear once but the n grams that appear repeatedly might be of some importance</doc>
                            </param>
                            <param name="lang" required="true" style="query" type="xsd:string">
                                <doc>the two letter code of the language you re analyzing The default is English en you do not need to specify anything if you re just using English text</doc>
                            </param>
                            <param name="max" required="true" style="query" type="xsd:string">
                                <doc>up to what length of n grams that should be generated The default is</doc>
                            </param>
                            <param name="min" required="true" style="query" type="xsd:string">
                                <doc>the minimum length of n grams that should be generated The default is</doc>
                            </param>
                            <param name="stopwords" required="true" style="query" type="xsd:string">
                                <doc>include this argument with a value of if you want to omit any stopwords from being included in the n grams that are generated The default is i e to include stopwords</doc>
                            </param>
                            <param name="text" required="true" style="query" type="xsd:string">
                                <doc>any block of text You must HTTP POST when calling with a block of text</doc>
                            </param>
                            <param name="url" required="true" style="query" type="xsd:string">
                                <doc>any valid URL If the URL specified is a URL shortened one e g bit ly Repustate will follow the redirects properly until the final page is found You must HTTP GET when calling with a URL</doc>
                            </param>
                        </request>
                        <response>
                            <representation element="f2002:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="detect-language.json/">
                    <method displayName="Language detection" id="2001" name="GET">
                        <doc>Given a piece of text (or a URL to a website), this API call will determine the language of the text in question. The response will contain a two letter code representing the language identified. Possible languages are english (en), french (fr), german (de), spanish (es), dutch (nl) and italian (it).  If a language cannot be accurately detected, an empty string will be returned as the language code.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                            <param name="text" required="true" style="query" type="xsd:string">
                                <doc>either a URL or a block of text must be provided Only used with POST</doc>
                            </param>
                            <param name="url" required="true" style="query" type="xsd:string">
                                <doc>either a URL or a block of text must be provided Only used with GET</doc>
                            </param>
                        </request>
                        <response>
                            <representation element="f2001:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="extract-dates.json/">
                    <method displayName="Data extraction" id="2000" name="POST">
                        <doc>Returns any mention of a date in english in form of YYYY-MM-DD. For example, "I'm going to school next week" would have result in "next week" being converted into a date string.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f2000:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="correction.json/">
                    <method displayName="Correction" id="1999" name="POST">
                        <doc>If you feel our sentiment engine is incorrect, you can issue a correction using this API call. This correction will only affect your data and cannot be influenced by others. In other words, if another Repustate user submits a correction stating that "I love hockey" is negative, that will only affect their scoring going forward, not anybody else's.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f1999:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="clean-html.json/">
                    <method displayName="Clean HTML" id="1998" name="GET">
                        <doc>This API call will extract out the most important part of a web page, removing all tags and any common header or footer content. For those familiar with Readability.js, this API call replicates Readability's functionality. You can also pass in a URL to a PDF and obtain just the text from this PDF.  If the article has a main image, the URL to this image will also be returned.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                            <param name="url" required="true" style="query" type="xsd:string">
                                <doc>any valid URL If the URL specified is a URL shortened one e g bit ly Repustate will follow the redirects properly until the final page is found</doc>
                            </param>
                        </request>
                        <response>
                            <representation element="f1998:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="chunk.json/">
                    <method displayName="Chunking with sentiment" id="1997" name="POST">
                        <doc>Often you might be interested in the individual portions of a document's sentiment, rather than the overall sentiment. Chunking is the process of breaking up a document into its more interesting parts and evaluating the sentiment on it. This API call chunks and returns the sentiment for each chunk.  Note that one of text or url must be included, but not both. If both are included, the text value will be used.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f1997:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="categorize.json/">
                    <method displayName="Categorizations" id="1996" name="POST">
                        <doc>Sometimes sentiment alone isn't enough - you want to know which aspects of a particular subject carry sentiment. For example, if you're a hotel, you might be interested in knowing people's opinions on your staff, as well as your amenities and the food offerings.  This API call automically categorizes text according to industry-specific categories. Below you'll find imformation on which industry verticals are supported as well as the categories for each:  hotel (food, price, location, accommodations, amenities, staff), airline (price, staff, in-flight, loyalty), restaurant (price, food, staff, location, atmosphere, events), telecom (price, service, products)</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f1996:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="bulk-detect-language.json/">
                    <method displayName="Bulk language detection" id="1995" name="POST">
                        <doc>Similar to language detection, but works on many pieces of text all at once. Structured similarly to the bulk sentiment call.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f1995:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
                <resource uri="adj.json/">
                    <method displayName="Adjectives" id="1994" name="POST">
                        <doc>With Repustate's natural language toolkit, you can extract key adjectives from data all over the world. Find out which words people are using to describe a particular brand, person or idea.  You must specify at least one of 'url' or 'text' otherwise you will receive an error for providing insufficient arguments.</doc>
                        <request>
                            <param name="apikey" required="true" style="query" type="xsd:string"/>
                        </request>
                        <response>
                            <representation element="f1994:root" mediaType="application/json"/>
                        </response>
                    </method>
                </resource>
            </resource>
        </resource>
    </resources>
</application>
